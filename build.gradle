plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.wanted.assignment'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Database
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.1.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // ModelMapper
    implementation 'org.modelmapper:modelmapper:3.2.3'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // SpringDoc OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
}

// JUnit Platform 사용하도록 설정
tasks.named('test') {
    useJUnitPlatform()
}

// 빌드 시 테스트가 실행되지 않도록 설정
/*withTypewithTypetasks.withType(Test).configureEach {
    enabled = false
}*/

// bootRun 설정
tasks.named('bootRun') {
    jvmArgs = ['-Dfile.encoding=UTF-8', '-Dconsole.encoding=UTF-8']
}

// Checkstyle 설정
checkstyle {
    configFile = file("${rootDir}/config/checkstyle/google-checkstyle.xml")
    configProperties = ["suppressionFile": project(':').file('config/checkstyle/checkstyle-suppressions.xml')]
    ignoreFailures = false
    maxWarnings = 0
    reportsDir = file(project.layout.buildDirectory.dir("checkstyle-output").get().asFile.path)
    toolVersion = '10.23.1'
}

checkstyleMain {
    reports {
        xml.outputLocation = file("${checkstyle.reportsDir}/checkstyle-report.xml")
    }
}

// PMD 설정
pmd {
    ruleSetFiles = files("${rootDir}/config/pmd/custom-ruleset.xml")
    ruleSets = []
    consoleOutput = true
    ignoreFailures = false
    reportsDir = file(project.layout.buildDirectory.dir("pmd-output").get().asFile.path)
    toolVersion = '7.13.0'
}

pmdMain {
    reports {
        xml.outputLocation = file("${pmd.reportsDir}/pmd-report.xml")
        xml.required = true
    }
}
